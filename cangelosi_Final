//// Final Project

String title=  "Final";
String author=  "Michael Cangelosi";

float sidewalk; //Sidewalk is where People will stand


String names[]= { 
  "Mike", "Phill", "Ben", "Brian", 
  "Jaimie", "Hannah", "Sophie", "Thomas", 
  "Ian", "Kevin", "Larry", "Morton", 
  "Nick", "Gary", "Oscar", "Peggy", 
  "Robert", "Slly", "Tommy", "Franky", 
  "Dean", "Wally", "Zack", "Quinn"
};


//
int many=15;
Person[] people=  new Person[many];

//// SETUP: State size and Sidewalk height.
void setup() {
  size(750, 550);
  sidewalk=  height-100;
  reset();
}

void reset() {
  for (int j=0; j<many; j++ ) {
    people[j]=  new Person( names[j] );
  }
}

//// NEXT FRAME
void draw() {
  smooth();
  background(50, 50, 250);
  scene();
  messages();
  present();
  //
  fill(200);
  textSize(20);

}

void scene() {
  noStroke();
  fill(214, 216, 216);
  rectMode(CORNERS);
  rect(0, sidewalk, width, height);
}
void messages() {
  fill(0);
  textSize(24);
  text( title, width/3, 30 );
  textSize(20);
  text( author, width*3/4, height-20 );
  textSize(15);
  help();
}
void help() {
  String s="KEYS:\n  r to reset, q to quit";
  s += "\n  t sends tallest to the right; s sends shortest to the right";
  s += "\n  w moves widest to right; n moves narrowest to right";
  text( s, 10, 25);
}


// Display all objects in array.
void present() {
  float x=30, y=sidewalk;
  for (int j=0; j<many; j++ ) {
    people[j].show( x, y );
    x=  x + 50;
  }
}  



void shorty( Person[] p, int m ) {
  int k;
  k=  whereShort( p, m );
  swap( p, k, m-1 );
}

//// EVENTS:  keys, clicks
void keyPressed() {
  if (key == 'q') exit();
  if (key == 'r') reset();
  if (key == 's') shorty( people, many );
  if (key == 't') tall( people, many );
  if (key == 'w') swap( people, many-1, whereWide(people,many) );
  if (key == 'n') swap( people, many-1, whereNarrow(people,many) );
  if (key == 'o') order( people, many );
}


// Move tallest (or shortest) to end
void tall( Person[] p, int m ) {
  println( "tall "+ m );
  int k;
  k=  whereTall( p, m );
  println( "swap "+ k +","+ (m-1) );
  swap( p, k, m-1 );
}
// Find the index of tallest (or shortest).
int whereTall( Person[] p, int m ) {
  int iTallest=0;
  for (int j=1; j<m; j++ ) {
    if ( p[j].h > p[iTallest].h ) iTallest=j;
  }
  return iTallest;
}
int whereShort( Person[] p, int m ) {
  int iShortest=0;
  for (int j=1; j<m; j++ ) {
    if ( p[j].h < p[iShortest].h ) iShortest=j;
  }
  return iShortest;
}
// method to switch two entries in an array
void swap( Person[] p, int a, int b ) {
  Person tmp;
  tmp=  p[a];
  p[a]=  p[b];
  p[b]=  tmp;
}


// Index the widest and skinniest.
int whereWide( Person[] p, int m ) {
  int k=0;
  for (int j=1; j<m; j++ ) {
    if ( p[j].w > p[k].w ) k=j;
  }
  return k;
}
int whereNarrow( Person[] p, int m ) {
  int i=0;
  for (int j=1; j<m; j++ ) {
    if ( p[j].w < p[i].w ) i=j;
  }
  return i;
}


// Sort Array by height
void order( Person q[], int m ) {
  for (int k=m; k>1; k--) {
    println( "*** k="+k );
    tall( q, k );
  }

}


// Person Class! 
class Person {
  float w, h;
  float r, g, b;
  float $;
  float age;
  String name="?";
  //// CONSTRUCTORS ////
  Person( String names ) {
    w=  random( 20, 50 );
    h=  random( 50, 100 );
    // Random colors.
    r=  random(200);
    g=  random(200);
    b=  random(200);
    $= random(1000,10000);
    age= random(1,99);
    
    name=  names;
  }

  //// METHODS  ////
  // show() -- Display this object.
  void show( float x, float y ) {
    fill( r, g, b );
    rectMode( CENTER );
    rect( x, y-h/2, w, h );


    // Name.
    fill(r,g,b);
    text( name, x-20, y+20 );
    text( int(w), x-20, y+32 );
    text( int(h), x-20, y+44 );
    text(int($), x-20, y+56);
    text( int(age), x-20, y+68);
    fill(255,255,0);
    text( name, 2+x-w/2, y-h/2 );
  }

}
